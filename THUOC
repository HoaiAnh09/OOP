#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;
class Thuoc{
    private:
        string MaThuoc,TenThuoc,HangThuoc;
        double Gia;
    public:
        Thuoc():MaThuoc("0"),TenThuoc("0"),HangThuoc("0"),Gia(0.0){}
        Thuoc(string nMaThuoc,string nTenThuoc,string nHangThuoc,double nGia):MaThuoc(nMaThuoc),TenThuoc(nTenThuoc),HangThuoc(nHangThuoc),Gia(nGia){}
        
        string getMaThuoc()const{
            return MaThuoc;
        }
        string getTenThuoc()const{
            return TenThuoc;
        }
        string getHangThuoc()const{
            return HangThuoc;
        }
        double getGia()const{
            return Gia;
        }
        void setMaThuoc(string value){
            MaThuoc=value;
        }
        void setTenThuoc(string value){
            TenThuoc=value;
        }
        void setHangThuoc(string value){
            HangThuoc=value;
        }
        void setGia(int value){
            Gia = value;
        }
        
        virtual void nhap(){
            cout<<"\tNhap ma thuoc: ";
            cin.ignore();getline(cin,MaThuoc);
            cout<<"\tNhap ten thuoc: ";
            cin.ignore();getline(cin,TenThuoc);
            cout<<"\tNhap hang thuoc: ";
            cin.ignore();getline(cin,HangThuoc);
            cout<<"\tNhap gia: ";
            cin>>Gia;
        }
        virtual void xuat(){
            cout<<"Ma Thuoc: "<<MaThuoc<<"| "<<"Ten Thuoc: "<<TenThuoc<<"| "<<"Hang Thuoc: "<<HangThuoc<<"| "<<"Gia: "<<Gia<<"| ";
        }
        friend bool operator == (Thuoc x,Thuoc y);
};
bool operator == (Thuoc x,Thuoc y){
    return x.getMaThuoc()==y.getMaThuoc();
}
class ThuocBo:public Thuoc{
    private:
        string CongDung;
    public:
        ThuocBo():CongDung("0"){}
        ThuocBo(string nMaThuoc,string nTenThuoc,string nHangThuoc,double nGia,string nCongDung):Thuoc(nMaThuoc,nTenThuoc,nHangThuoc,nGia),CongDung(nCongDung){}
        ~ThuocBo(){}
        string getCongDung()const{
            return CongDung;
        }
        void setCongDung(string value){
            CongDung = value;
        }
        
        void nhap()override{
            Thuoc::nhap();
            cin.ignore();
            cout<<"\tNhap cong dung: ";
            cin.ignore();getline(cin,CongDung);
            
        }
        void xuat()override{
            Thuoc::xuat();
            cout<<"Cong Dung: "<<CongDung<<"| "<<endl;
        }
        
};
class KhangSinh:public Thuoc{
    private:
        string HamLuongSD;
    public:
        KhangSinh():HamLuongSD("0"){}
        KhangSinh(string nMaThuoc,string nTenThuoc,string nHangThuoc,double nGia,string nCongDung,string nHamLuongSD):Thuoc(nMaThuoc,nTenThuoc,nHangThuoc,nGia),HamLuongSD(nHamLuongSD){}
        ~KhangSinh(){}
        string getHamLuongSD()const{
            return HamLuongSD;
        }
        void setHamLuongSD(string value){
            HamLuongSD=value;
        }
        
        void nhap()override{
            Thuoc::nhap();
            cin.ignore();
            cout<<"\tNhap ham luong su dung: ";
            cin.ignore();getline(cin,HamLuongSD);
        }
        void xuat()override{
            Thuoc::xuat();
            cout<<"Ham Luong SD: "<<HamLuongSD<<"| "<<endl;
        }
        
};

void ChuongTrinhChinh(){
    int soLuong,LoaiThuoc;
    cout<<"Nhap so luong thuoc: ";
    cin>>soLuong;
    
    vector<Thuoc*>DanhSachThuoc;
    for(int i=0;i<soLuong;i++){
        cout<<"1.Thuoc bo"<<endl;
        cout<<"2.Khang sinh"<<endl;
        cout<<"Chon loai thuoc muon nhap: ";
        cin>>LoaiThuoc;
    
        if(LoaiThuoc==1){
            ThuocBo tb;
            tb.nhap();
            DanhSachThuoc.push_back(new ThuocBo(tb));
            
        }
        if(LoaiThuoc==2) {
            KhangSinh ks;
            ks.nhap();
            DanhSachThuoc.push_back(new KhangSinh(ks));
            
        }
        if(LoaiThuoc!=1 &LoaiThuoc!=2){
            cout<<"Khong hop le!Vui long nhap lai!"<<endl;
            i--;
        }
    }
        cout<<"====DANH SACH THUOC===="<<endl;
        for(int i=0;i<DanhSachThuoc.size();i++){
            DanhSachThuoc[i]->xuat();
            cout<<endl;
        }
        //tim kiem
        cout<<"1.Thuoc bo"<<endl;
        cout<<"2.Khang sinh"<<endl;
        cout<<"Nhap loai thuoc muon nhap them: ";
        cin>>LoaiThuoc;
        if(LoaiThuoc==1){
            int dem =0;
            ThuocBo tb;
            Thuoc* ptrtb=&tb;
            tb.nhap();
            for(int i=0;i<DanhSachThuoc.size();i++){
                if(*ptrtb==*DanhSachThuoc[i]){
                    cout<<"Da co thuoc bo trong danh sach!"<<endl;
                    dem++;
                    break;
                }
            }if(dem==0){
                cout<<"Chua co thuoc bo trong danh sach! Da them vao danh sach!"<<endl;
                DanhSachThuoc.push_back(new ThuocBo(tb));
            }
        }else{
            int dem =0;
            KhangSinh ks;
            KhangSinh* ptrks=&ks;
            ks.nhap();
            for(int i=0;i<DanhSachThuoc.size();i++){
                if(*ptrks==*DanhSachThuoc[i]){
                    cout<<"Da co khang sinh trong danh sach!"<<endl;
                    dem++;
                    break;
                }
            }if(dem==0){
                cout<<"Chua co khang sinh trong danh sach!Da them vao danh sach!"<<endl;
                DanhSachThuoc.push_back(new KhangSinh(ks));
            }
        }
       cout<<"====DANH SACH SAU KHI THEM THUOC MOI===="<<endl;
       for(int i=0;i<DanhSachThuoc.size();i++){
        DanhSachThuoc[i]->xuat();
       }
}
int main(){
    ChuongTrinhChinh();
    return 0;
}
